"""
Django settings for fitnesIO project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
from datetime import timedelta
from pathlib import Path
import os  # Import os
from dotenv import load_dotenv # Import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# --- Load .env file ---
# Place this near the top, before variables are accessed
load_dotenv(dotenv_path=BASE_DIR / '.env')
# --- End Load .env file ---

AUTH_USER_MODEL = 'user.CustomUser'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# --- Load SECRET_KEY from environment ---
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure--=k3ztr+xgx1ap5&a+@-grdk%p+fqe_itr_8+y@8no582!%e-8') # Provide default only for dev

# SECURITY WARNING: don't run with debug turned on in production!
# --- Load DEBUG from environment ---
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true' # Default to False

ALLOWED_HOSTS = ["*"] # Keep this as is, configure manually or via env var separately if needed


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'ai_model',
    'routine',
    'user',
    'utils',
    'parler',
    'drf_yasg',
    'myapp',
    'rest_framework.authtoken',
    'googleauth',
    'rest_framework_simplejwt',
    'telegram',
    # Add these if you are using Celery with DB results/beat scheduler
    'django_celery_results',
    'django_celery_beat',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
    )
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
     # Use the SECRET_KEY loaded from env or the default
    'SIGNING_KEY': SECRET_KEY,
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'fitnesIO.urls'

# --- Load Redis Host from Environment for Celery ---
REDIS_HOST = os.environ.get('REDIS_HOST', 'redis-test') # Default to 'redis-test' if not in .env

CELERY_BROKER_URL = f'redis://{REDIS_HOST}:6379/0'
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_RESULT_BACKEND = 'django-db' # Keep as is, requires django-celery-results
CELERY_CACHE_BACKEND = 'default' # Uses the 'default' cache defined below
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler' # Keep as is, requires django-celery-beat

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'fitnesIO.wsgi.application'

# --- Load Redis Host from Environment for Cache ---
# Use the same REDIS_HOST loaded above
CACHE_REDIS_HOST = os.environ.get('REDIS_HOST', 'redis-fitnes') # Default to 'redis-fitnes' if not in .env for cache

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{CACHE_REDIS_HOST}:6379/1",  # Use DB 1 for caching
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            # Add password from env if needed:
            # "PASSWORD": os.environ.get("REDIS_PASSWORD"),
        }
    }
}

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = '/chat/'
LOGOUT_REDIRECT_URL = '/accounts/login/'

# --- Load Database Credentials from Environment ---
DATABASES = {
    'default': {
        # Keep original ENGINE or load from env if needed:
        # 'ENGINE': os.environ.get("SQL_ENGINE", 'django.db.backends.postgresql'),
        'ENGINE': 'django.db.backends.postgresql', # Assuming this was your original intention
        'NAME': os.environ.get("SQL_DATABASE"),
        'USER': os.environ.get("SQL_USER"),
        'PASSWORD': os.environ.get("SQL_PASSWORD"), # Load password
        'HOST': os.environ.get("SQL_HOST"),
        'PORT': os.environ.get("SQL_PORT", 5432), # Load port, default 5432
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/' # Corrected from 'satic_root/' - adjust if 'satic_root/' was intended
STATIC_ROOT = BASE_DIR / 'staticfiles' # Using a standard name, adjust if needed

# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR,'static')
# ]

MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media/' # Keep original 'media/' path

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- Load Email Credentials from Environment ---
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com' # Keep as is unless you want it configurable
EMAIL_PORT = 587 # Keep as is unless you want it configurable
EMAIL_USE_TLS = True # Keep as is unless you want it configurable
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER') # Load user
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD') # Load password
EMAIL_HOST_NAME = os.environ.get('EMAIL_HOST_NAME', 'FITNESSIO') # Load optional name or default
DEFAULT_FROM_EMAIL = f"{EMAIL_HOST_NAME} <{EMAIL_HOST_USER}>" if EMAIL_HOST_USER else f"{EMAIL_HOST_NAME} <noreply@example.com>" # Construct safely

# --- Load Twilio Credentials from Environment ---
TWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID')
TWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN')
TWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER')

# --- Load Google Credentials from Environment ---
GOOGLE_CLIENT_ID = os.environ.get('GOOGLE_CLIENT_ID')
GOOGLE_CLIENT_SECRET = os.environ.get('GOOGLE_CLIENT_SECRET')
GOOGLE_REDIRECT_URI = os.environ.get('GOOGLE_REDIRECT_URI')
GOOGLE_API_KEY = os.environ.get('GOOGLE_API_KEY') # Load separate API key if used

# --- Django Parler settings (Keep original, example) ---
# PARLER_LANGUAGES = { ... }

# --- DRF Yasg settings (Keep original, example) ---
# SWAGGER_SETTINGS = { ... }